openapi: '3.0.2'
info:
  title: COODFort
  version: '1.0'
servers:
  - url: http://localhost:4000
    description: Local server
  - url: https://3z6czkv5-4000.euw.devtunnels.ms/
    description: Development server
components:
  schemas:
###
# Multi-language string object
#
    mlstring:
      description: Multi-language string
      oneOf:
        - type: string
        - type: object
          required:
            - default
          properties:
            default:
              type: string
            values:
              type: array
              items:
                type: array
                items: 
                  type: string
                minItems: 2
                maxItems: 2
###
# Array of Multi-language tags
#
    tags:
      type: array
      items: 
        $ref: "#/components/schemas/mlstring"
      description: Array of Multi-language tags

###
# Photo object
#
    photo:
      type: object
      required:
        - url
      properties:
        url: 
          type: string
        caption:
          $ref: "#/components/schemas/mlstring"
        tags:
          $ref: "#/components/schemas/tags"

      description: Photo object (URL to photo or dataurl of photo)
###
# The Proto object is the ancestor of all objects. It consists of service fields
#
#
    proto:
      description: The Proto object is the ancestor of all objects. It consists of service fields
      type: object
      properties:
        id:
          type: number
          description: Uniq id of any record
        locked:
          oneOf:
            - type: boolean
            - type: number
          description: Whether document is locked by user to change
        lockedByUser:
          type: string
          description: Name of user who locks the document to change
        blocked:
          description: Whether document is blocked
          oneOf:
            - type: boolean
            - type: number
        created:
          type: string
          description: Creation date 
        changed:
          type: string
          description: Date of last change of document
        createdByUser:
          description: User who created the document
          type: string
        changedByUser:
          description: User who makes last change
          type: string
        wfStatus:
          description: Current workflow status of document
          type: number
        wfHistory:
          description: Workflow status change history
          type: array
    ###
    # The User object
    user:
      description: IUser structure
      allOf:
        - type: object
          required:
            - login
            - hash
          properties:
            login:
              type: string
              description: Uniq string of user
            hash:
              type: string
              description: Hash code created by server 
            name:
              type: string
              description: Visible name of user
            photos:
              description: avatars or Pictures of user
              type: array
              items:
                $ref: "#/components/schemas/photo"
            bios:
              description: Long text about user
              type: string
            tags:
              $ref: "#/components/schemas/tags"
        - $ref: "#/components/schemas/proto"
    ###
    # The MealRequisites object
    mealRequisites:
      description: The MealRequisites object
      type: object
      required:
        - name
        - description
      properties:
        name:
          $ref: "#/components/schemas/mlstring"
        description:
          $ref: "#/components/schemas/mlstring"
        tags:
          $ref: "#/components/schemas/tags"
    ###
    # The MealOption object
    mealOption:
      description: Menu option object is availaible combination or volume of meal
      type: object
      required:
        - name
        - amount
        - currency
      properties:
        name:
          $ref: "#/components/schemas/mlstring"
        amount:
          type: number
          description: Option cost
        currency:
          $ref: "#/components/schemas/mlstring"
        esId:
          type: string
        includeOptions:
          $ref: "#/components/schemas/mealOption"
        excludeOptions:
          $ref: "#/components/schemas/mealOption"
    ###
    # The EATERY object
    eatery:
      description: |
        The EATERY object (IEatery structure). This object is used to manage by any eatery
      allOf:
        - type: object
          required:
            - name
          properties:
            name:
              $ref: "#/components/schemas/mlstring"
            employees: 
              type: array
              description: List of employees in eatery. It could not be changed by updating eatery object
            tables: 
              type: array
              description: List of tables of Eatery
            deliveryPartnerIds: 
              type: array
            entertainmentIds: 
              type: array
            url:
              description: Object represents url and Multi-language caption text
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                caption: 
                  $ref: "#/components/schemas/mlstring"
            coords:
              type: object
            photos:
              description: List of photos 
              type: array
              items:
                $ref: "#/components/schemas/photo"
            description:
              $ref: "#/components/schemas/mlstring"
            tags:
              $ref: "#/components/schemas/tags"
            cuisines:
              type: array
            averageBills:
              type: array
            menuId:
              description: Uniq id of eatery's menu
              type: number
            esId: 
              description: Reference to executive system of kitchen
              type: string
            tableRequiredToInhouseOrder:
              description: Whether tableId is required to make order or booking
              type: boolean
            approveRequiredToReserve:
              description: Whether approving of eatery's sous-chef is required to start cooking
              type: boolean
        - $ref: "#/components/schemas/proto"
    ###
    # The Orderitem object
    orderItem:
      description: |
        The OrderItem object = IOrderItem structure
      allOf:
        - $ref: "#/components/schemas/mealRequisites"
        - type: object
          required:
            - option
            - count
          properties:
            option:
              $ref: "#/components/schemas/mealOption"
            count:
              type: number
            comment:
              type: string
        - $ref: "#/components/schemas/proto"
    ###
    # The Order object
    order:
      description: Th Order object (IOrder)
      allOf:
        - type: object
          required:
            - items
            - discount
          properties:
            userId: 
              type: number
              description: Author id of object
            eateryId:
              type: number
              description: Eatery where the order was created
            tableId:
              type: number
              description: Table id where order was created
            items:
              type: array
              items:
                $ref: "#/components/schemas/orderItem"
            discount:
              type: number
              description: "1 or markup and discount applied to all order positions"
            comment:
              type: string
            esId:
              type: string
        - $ref: "#/components/schemas/proto"
  requestBodies:
    eateryPointer:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                description: Unique id of the Eatery
                type: number
                example: 1
    orderPointer:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                description: Unique id of the Order
                type: number
                example: 1

  responses:
    errorResponse:
      description: Universal error structure
      content:
        application/json:
          schema:
            type: object
            required:
              - ok
              - message
            properties:
              ok:
                type: boolean
              message:
                type: string
              error:
                type: object
    eaterySuccess:
      description: |
        Any success answer consists of flag `ok` and object of Eatery
        Information about Eatery was collected successfully
        ```javascript
        {
            ok: true, 
            eatery: IEatery
        }
        ```
      content:
        application/json:
          schema: 
            type: object
            required:
              - ok
              - eatery
            properties:
              ok:
                type: boolean
              eatery:
                $ref: "#/components/schemas/eatery"
    userSuccess:
      description: |
        Any success answer consists of flag `ok` and object of User
        Information about User was collected successfully
        ```javascript
        {
            ok: true, 
            eatery: IUser
        }
        ```
      content:
        application/json:
          schema: 
            type: object
            required:
              - ok
              - user
            properties:
              ok:
                type: boolean
              user:
                $ref: "#/components/schemas/user"
    orderSuccess:
      description: |
        Any success answer consists of flag `ok` and object of Order
        Information about Order was collected successfully
        ```javascript
        {
            ok: true, 
            eatery: IUser
        }
        ```
      content:
        application/json:
          schema: 
            type: object
            required:
              - ok
              - order
            properties:
              ok:
                type: boolean
              user:
                $ref: "#/components/schemas/order"
  securitySchemes:
    COODFortTGUserId:
      type: apiKey
      in: header
      name: coodfort-tguid
    TGQueryCheckString:
      type: apiKey
      in: header
      name: coodfort-tgquerycheckstring
    COODFortLogin:
      type: apiKey
      in: header
      name: coodfort-login
    COODFortPassword:
      type: apiKey
      in: header
      name: coodfort-password
paths:
  /version:
    get:
      description: Returns version of CoodFort API
      operationId: version
      security: []
      responses:
        '200': 
          description: Alway successful if availaible
          content:
            application/json:
              schema:
                type: object
                required:
                  - ok
                  - version
                properties:
                  ok: 
                    type: boolean
                  version:
                    type: string
###
# Working with EARTERY class
#
  /eatery/update:
    post:
      description: |
        Creates or updates Eatery
      tags:
        - eatery
        - create
        - update
      operationId: updateEatery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eatery"
      responses:
        '200':
          $ref: "#/components/responses/eaterySuccess"
        '403':
          $ref: "#/components/responses/errorResponse"
        '400':
          $ref: "#/components/responses/errorResponse"
  /eatery/view:
    post:
      description: Reveals information about `Eatery` by its unique id. If an employee of Eatery requests the information then IEatory object includes the employees array. Else the employee array is absent
      tags:
        - eatery
        - view
      operationId: viewEatery
      requestBody:
        $ref: "#/components/requestBodies/eateryPointer"
      responses:
        '200':
          $ref: "#/components/responses/eaterySuccess"
        '400':
          $ref: "#/components/responses/errorResponse"
  /eatery/publish:
    post:
      description: Makes the eatery available for guests
      tags:
        - eatery
        - workflow
      operationId: publishEatery
      requestBody:
        $ref: "#/components/requestBodies/eateryPointer"
      responses:
        '200':
          $ref: "#/components/responses/eaterySuccess"
        '403':
          $ref: "#/components/responses/errorResponse"
        '400':
          $ref: "#/components/responses/errorResponse"
  /eatery/ordersList:
    post:
      operationId: eateryOrderList
      description: |
        If User is employee of `Eatery` and has role `sous-chef` then path returns array of Eatery's `Orders`, else it returns 403 error
      tags:
        - eatery
        - order
        - view
      requestBody:
        $ref: "#/components/requestBodies/eateryPointer"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - ok
                  - orders
                properties:
                  ok:
                    type: boolean
                  orders:
                    type: array
                    items:
                      $ref: "#/components/schemas/order"
        '400':
          $ref: "#/components/responses/errorResponse"
        '403':
          $ref: "#/components/responses/errorResponse"                 
  /user/new:
    post:
      description: Creates new User. It may be an employee or a guest
      tags:
        - user
        - create
      operationId: newUser
      parameters:
        - name: coodfort-login
          in: header
          required: true
          schema:
            type: string
        - name: coodfort-password
          in: header
          required: true
          schema:
            type: string
      security: []      
      responses:
        '200':
          $ref: "#/components/responses/userSuccess"
        '400':
          $ref: "#/components/responses/errorResponse"
  /user/view:
    post:
      tags:
        - user
        - view
      operationId: viewUser
      responses:
        '200':
          $ref: "#/components/responses/userSuccess"
        '400':
          $ref: "#/components/responses/errorResponse"
  /user/eateriesList:
    post:
      operationId: userEateriesList
      responses:
        '200':
          description: OK
  /user/mealsList:
    post:
      operationId: userMealsList
      responses:
        '200':
          description: OK
  /user/menusList:
    post:
      operationId: userMenusList
      responses:
        '200':
          description: OK
  /user/ordersList:
    post:
      operationId: userOrdersList
      responses:
        '200':
          description: OK
  /meal/new:
    post:
      operationId: newMeal
      responses:
        '200':
          description: OK
  /meal/view:
    post:
      operationId: viewMeal
      responses:
        '200':
          description: OK
  /meal/update:
    post:
      operationId: updateMeal
      responses:
        '200':
          description: OK
  /menu/update:
    post:
      operationId: updateMenu
      responses:
        '200':
          description: OK
  /menu/view:
    post:
      operationId: viewMenu
      responses:
        '200':
          description: OK
  /order/view:
    post:
      description: View order by its uniq id
      tags:
        - order
        - view
      operationId: viewOrder
      requestBody:
        $ref: "#/components/requestBodies/orderPointer"
      responses:
        '200':
          $ref: "#/components/responses/orderSuccess"
        '403':
          $ref: "#/components/responses/errorResponse"
        '400':
          $ref: "#/components/responses/errorResponse"
  /order/update:
    post:
      description: Creates of update order
      tags:
        - order
        - create
        - update
      operationId: updateOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/order"
      responses:
        '200':
          $ref: "#/components/responses/orderSuccess"
        '403':
          $ref: "#/components/responses/errorResponse"
        '400':
          $ref: "#/components/responses/errorResponse"
# 
  /order/itemWfNext:
    post:
      description: Moves OrderItem to next workflow status
      tags:
        - order
        - workflow
      operationId: wfNextOrderItem
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - orderItemIds
              properties:
                orderItemIds:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - nextWfStatus
                    properties:
                      id: 
                        type: number
                      nextWfStatus:
                        type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - ok
                  - orderItems
                properties:
                  ok:
                    type: boolean
                  orderItems:
                    type: array
                    items:
                      $ref: "#/components/schemas/orderItem"
        '403':
          $ref: "#/components/responses/errorResponse"
        '400':
          $ref: "#/components/responses/errorResponse"
security:
  - COODFortTGUserId: []
    TGQueryCheckString: []
  - COODFortLogin: []
    COODFortPassword: []